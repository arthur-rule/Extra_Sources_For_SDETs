Note2

1- Selenium Note1 Review
2- Tasks
3- findElement()
4- Locators
5- getText()
6- getAttribute()
















--------------------------------------------------------------------------------
What is Selenium?
	- Selenium is basically a bunch of libraries that allows us to automate browsers.
	- In simple terms, Selenium is a bunch of jar files (libraries)
	- We use these jar files to automate browsers




















--------------------------------------------------------------------------------
What is Maven?
 - Maven is a build automation tool.
 - Maven comes with certain folder and file structures.




















--------------------------------------------------------------------------------
What is build?
	- Build is repeating steps when we create a maven project.
	- And also some other repeating steps until we deploy the project.

	-src
		- main
		- test
	-pom.xml


















--------------------------------------------------------------------------------
What is pom.xml file?
	- pom = "project object model"
	- xml = "extensible mark up language"

	- "pom.xml" file is the most important file in a maven project.
	- We manage (add, remove, change) versions of our dependencies.




















--------------------------------------------------------------------------------
Is Maven for testers?
 - No.




















--------------------------------------------------------------------------------
What version of Selenium you are using in your current project?
 - 4.6.0




















--------------------------------------------------------------------------------
If developers are using both "main", and "test" folders, where will we write our "automation code"?

	- Testers and developers are not working on the same project.
	- As SDET, you will create your own project and automate test cases in that project.




















--------------------------------------------------------------------------------
What is a dependency?
	- Dependencies are just jar files.
	- We add dependencies to pom.xml file, and maven automatically downloads our jar files in the version we provide




















--------------------------------------------------------------------------------
Where does Maven project download the dependencies to?

	- .m2 folder

For Windows:
	1- Go to Run:
	2- c:\Users\YourUserName\.m2
	3- Press enter

For Mac:
	1- Open Go (from top of the screen)
	2- Go to folder
	3- Enter : ~/.m2

For Linux:
	1- Open Files (from Applications)
	2- Search .m2 folder
	3- Enter .m2 folder(/home/YourUserName/.m2)
















--------------------------------------------------------------------------------
Where do we get our "expected data" from?

	- Documentation
	- Requirement documents



















--------------------------------------------------------------------------------
Where do we get our "actual data" from?
	- We get the "actual data" from the browser after we do our testing.




















--------------------------------------------------------------------------------

day2_locators_getText_getAttribute


--------------------------------------------------------------------------------

- To be able to locate web element and do any action on it using Selenium, we have some steps to follow.

1- Locate the web element we want to work on.
2- To locate the web element, we need to use some methods coming from Selenium library.
	- findElement(locator)
	- locators
3- After locating, we can select what kind of action we will do, and use its method from selenium library.

Selenium Methods:
#1- What does it do?
#2- Does it accept any argument?
#3- Does it have a return type?
#4- Does it throw any acception?

--------------------------------------------------------------------------------

- .findElement(locator);
	1- It finds and returns a SINGLE web element.
	2- It accepts locators as Arguments, that will allow this method to find given element.
	3- Its return type is: WebElement
	4- It throws "NoSuchElementException" if it cannot find the web element with given locator for any reason.
		- If you provide incorrect locator
		- If your page is opening slow compared to your browser


- .sendKeys(String arg) method:
	- This method accepts String as argument.
	- It will send this String argument into the already located web element.

- .click();
	- This method just clicks to the already located web element.
	- This does not accept any argument, just clicks.


- What is a locator?
	- Locators are set of methods coming from Selenium library, that allows us to locate web elements in different ways.
	- We have 8 locators coming from Selenium library.
	- Today we will learn 6 of the locators.

1- linkText:
	- linkText locator will go through the whole page, checking the texts of all <a> tags, and returning the matching web element
	- It accepts a string as the text of the web element we are trying to locate.
	- It will look throught the whole HTML code for EXACT match in the HTML.
	- It will return the FIRST matching result.
	- linkText method is very similar to .equals() method.

ex: <a class="nav-link" href="/">Home</a>

syntax:

	driver.findElement(By.linkText("Home"));


2- partialLinkText:
	- linkText locator will go through the whole page, checking the texts of all <a> tags, and returning the partial matching web element
	- it accepts a string as the text of the web element we are trying to locate.
	- It will look throught the whole HTML code for PARTIAL MATCH.
	- It will return the FIRST matching result.
	- partialLinkText method is very similar to .contains() method

ex: <a class="nav-link" href="/">GOOGLE SEARCH</a>

syntax:

	driver.findElement(By.partialLinkText("GOOGLE"));
	driver.findElement(By.partialLinkText("SEARCH"));
	driver.findElement(By.partialLinkText("GOOGLE SEARCH"));

All of the 3 syntaxes provided above can return the same web element.

3- name: locator
	- name locator uses the "name" attribute's value to locate the web element.
	- It will go through the entire HTML, checking the name attributes' values
	- It will return the first matching result.
	- "name" attribute's value does not have to be unique.

ex:
	<div name="hp58"> </div>

syntax:

	driver.findElement(By.name("hp58"));


4- id:
	- id locator uses the "id" attribute's value to locate the web element.
	- It will go through the entire HTML, checking the id attributes' values
	- id attribute's value MUST BE UNIQUE.

ex:
	<div name="hp58" id="jk56"> </div>

syntax:

	driver.findElement(By.id("jk56"));

5- className :
	- className locator uses the "class" attribute's value to locate the web element.
	- It will go through the entire HTML, checking the class attributes' values
	- It will return the first matching result
	- It doesn't have to be unique. So use it carefully.

ex:
	<div name="hp58" id="jk56" class="pl99"> </div>

syntax:

	driver.findElement(By.className("pl99"));

6- tagName:
	- it will find and return the first matching web element with given tag name
	- it doesn't have many use cases.
	- useful maybe if the web page is very small, or if we are trying to return multiple web elements using findElements method.

ex:
	<div name="hp58" id="jk56" class="pl99"> </div>

syntax:

	driver.findElement(By.tagName("div"));


------------------------------------------------------------------------

- getText();

	- getText() method will get the text of the given web element.
	- this method can only get the text from in between the opening tag and closing tag.
	- <openingTag> TEXT </closingTag>
	- this method doesn't accept any argument
	- Return type is: String

	ex: <a href="https://something.com"> GOOGLE SEARCH </a>

	driver.findElement(By.linkText("GOOGLE SEARCH"));
		-> this line returns me the web element
		-> Return type as; WebElement

	driver.findElement(By.linkText("GOOGLE SEARCH")).getText();
		-> this line will return the text of the given web element
		-> Return type as; String

------------------------------------------------------------------------

- getAttribute("attributeName");
	- getAttribute() will get the value of the given attribute on a given web element
	- It accepts a String argument as the attribute we want to get the value of
	- Return type: String

ex:
	<div name="hp58" id="jk56" class="pl99"> </div>


syntax:

	driver.findElement(By.tagName("div")); --> this line will return the WebElement

	driver.findElement(By.tagName("div")).getAttribute("name"); 	--> hp58
	driver.findElement(By.tagName("div")).getAttribute("id"); 		--> jk56
	driver.findElement(By.tagName("div")).getAttribute("class"); 	--> pl99






