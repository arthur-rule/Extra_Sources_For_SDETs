-- "Clean Code" is a set of principles and practices aimed at writing code that is easy to read, understand, and maintain.

        1-Use meaningful names: Choose descriptive names for variables, methods, and classes that accurately convey their purpose and functionality.
         Avoid using single-letter names or cryptic abbreviations.

        2-Follow proper formatting: Follow standard Java formatting conventions, such as using curly braces on a new line and consistent spacing.(Ctrl+Shift+L in intellij)

        3-Keep methods and classes small: Break down your code into smaller, focused methods and classes that perform a single task.
        This makes your code easier to understand and maintain. Aim for methods and
        classes that are no longer than a few dozen lines.

        4-Use comments effectively: Add comments to explain complex logic, assumptions, or any non-obvious code. However, strive to write
         self-explanatory code that doesn't require excessive comments to understand.

        5-Write self-explanatory code: Someone unfamiliar with the code can understand its purpose.

        6-Avoid duplication: Don't repeat the same code in multiple places. Instead, extract common functionality into reusable
        methods or classes. This promotes code reusability and reduces the likelihood
         of introducing bugs when making changes.

        7-Follow the Single Responsibility Principle: Each method and class has a single responsibility and focuses on doing one thing well.
        This makes your code more modular, testable, and easier to understand.

        As sumary:
        Clean Code: Code that is well-organized, readable, maintainable, and follows best practices and coding standards.
		The exact opposite of clean code --> Dirty Code / Messy Code / Spaghetti Code(Much like a plate of spaghetti,
		where the noodles are twisted nnd inter twined in a chaotic manner): Code that is poorly
		organized, hard to read, and difficult to maintain. It often results from a lack of structure, inconsistent naming
		conventions, and poor documentation.